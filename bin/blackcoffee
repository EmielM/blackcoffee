#!/usr/bin/env node
// Generated by CoffeeScript 1.8.0
(function() {
  var Coffee, Fs, Macro, Nodes, Path, SourceMap, arg, args, ast, asts, bare, cs, executable, file, flag, flags, fragment, fragments, i, js, lib, map, output, sourceMap, _i, _len, _ref;

  Fs = require('fs');

  Path = require('path');

  lib = Path.join(Path.dirname(Fs.realpathSync(__filename)), '../lib/coffee-script');

  Coffee = require("" + lib + "/coffee-script");

  Nodes = require("" + lib + "/nodes");

  SourceMap = require("" + lib + "/sourcemap");

  Macro = require("" + lib + "/macro");

  args = process.argv.slice(2);

  flags = root.flags = {};

  i = 0;

  while (i < args.length) {
    arg = args[i++];
    if (arg[0] !== '-') {
      continue;
    }
    args.splice(--i, 1);
    if (arg === '--') {
      break;
    }
    if (arg === '-o') {
      output = args[i];
      args.splice(i, 1);
    } else if (arg === '-m') {
      map = args[i];
      args.splice(i, 1);
    } else if (arg === '-b') {
      bare = true;
    } else if (arg === '-f') {
      flag = args[i].split('=');
      flags[flag[0]] = (_ref = flag[1]) != null ? _ref : true;
      args.splice(i, 1);
    } else {
      process.stderr.write("invalid option '" + arg + "'\n");
      process.exit(1);
    }
  }

  asts = [];

  for (_i = 0, _len = args.length; _i < _len; _i++) {
    file = args[_i];
    cs = Fs.readFileSync(file).toString();
    asts.push(Coffee.nodes(cs, {
      filename: file
    }));
    executable = executable || Fs.statSync(file).mode & (1 << 6);
  }

  ast = new Nodes.Block(asts);

  ast = Macro.expand(ast, Coffee.nodes);

  fragments = ast.compileToFragments({
    bare: bare
  });

  js = ((function() {
    var _j, _len1, _results;
    _results = [];
    for (_j = 0, _len1 = fragments.length; _j < _len1; _j++) {
      fragment = fragments[_j];
      _results.push(fragment.code);
    }
    return _results;
  })()).join('');

  if (executable) {
    js = "#!/usr/bin/env node\n" + js;
  }

  if (output) {
    Fs.writeFileSync(output, js, {
      flag: "wx",
      mode: executable ? 0x1f8 : 0x1b0
    });
  } else {
    process.stdout.write(js);
  }

  if (map) {
    sourceMap = new SourceMap(fragments);
    sourceMap = sourceMap.generate({
      inline: true
    });
    Fs.writeFileSync(map, sourceMap, null, "wx");
  }

}).call(this);
